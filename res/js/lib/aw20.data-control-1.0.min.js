/*! AW2.0 | aw20.co.uk */
/*"aw20.datacontrol.js"*/
function DataControl(a) {
  var n = this;
  var d = "_nostore";
  var c = {
    logInfoMode: false,
    keyAttribute: "key",
    validateAttribute: "validate",
    structureElement: "div",
    cloneDefaultClass: "default",
    storeUnchecked: false,
    storeUncheckedValue: "",
    validator: {
      email: function (o) {
        var p = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
        return p.test(o)
      },
      number: function (o) {
        return (!isNaN(o) && o.length > 0)
      },
      notblank: function (o) {
        return ($.trim(o).length > 0)
      }
    },
    onFailedValidation: function (o) {
      var q = typeof (o.attr("title")) != "undefined" && o.attr("title").length > 0 ? o.attr("title") : o.attr(c.keyAttribute);
      var p = o.attr(c.validateAttribute);
      alert("Validation error: " + q + " must be a valid " + p + ".")
    },
    onGetComplete: function (o) {},
    onSetComplete: function (o) {},
    onBeforeGet: function () {},
    onBeforeSet: function () {}
  };
  var k = function (o) {
    if (typeof (o) != "undefined") {
      if ($.isPlainObject(o)) {
        $.extend(c, o)
      } else {
        i("invalid configuration")
      }
    }
  };
  var l = function (p) {
    var o = typeof (p) == "string" ? $(p) : p;
    return o
  };
  var i = function (o) {
    console.log("aw20.datacontrol: " + o)
  };
  var g = function (o) {
    if (c.logInfoMode == true) {
      i(o)
    }
  };
  var j = function (o) {
    return o.attr(c.keyAttribute)
  };
  var m = function (o) {
    var s = l(o);
    var r = $(c.structureElement + "[" + c.keyAttribute + "]", s).not($("*[" + c.keyAttribute + "] *[" + c.keyAttribute + "]", s)).not($("*", "." + c.cloneDefaultClass)).not("." + c.cloneDefaultClass);
    var q = $("*[" + c.keyAttribute + "]", s).not($("*", r)).not(c.structureElement).not($("*", "." + c.cloneDefaultClass)).not("." + c.cloneDefaultClass);
    var p = {};
    r.each(function (u, v) {
      var t = m($(v)); /*console.log(j($(v)));console.log($("*["+c.keyAttribute+"='"+j($(v))+"']"));*/
      if ($("*[" + c.keyAttribute + "='" + j($(v)) + "']").size() <= 1) {
        p[j($(v))] = t
      } else {
        if (typeof (p[j($(v))]) == "undefined") {
          p[j($(v))] = []
        } else {
          if (!$.isArray(p[j($(v))])) {
            i("key array initialisation failed");
            return false
          }
        }
        p[j($(v))].push(t)
      }
    });
    g("structure process - " + j(s));
    q.each(function (t, u) {
      if ($(u).is(":radio") || $(u).hasClass(c.cloneDefaultClass) || $("*[" + c.keyAttribute + "='" + j($(u)) + "']", q.parent()).size() <= 1) {
        var v = f($(u));
        if (v != d) {
          if (b($(u), v)) {
            p[j($(u))] = v
          }
        }
      } else {
        if (typeof (p[j($(u))]) == "undefined") {
          p[j($(u))] = []
        } else {
          if (!$.isArray(p[j($(u))])) {
            i("key array initialisation failed");
            return false
          }
        }
        var v = f($(u));
        if (v != d) {
          if (b($(u), v)) {
            p[j($(u))].push(v)
          }
        }
      }
    });
    return p
  };
  var f = function (p) {
    var o = p.context.tagName.toLowerCase();
    switch (o) {
      case "input":
        var q = typeof (p.attr("type")) == "undefined" ? "text" : p.attr("type").toLowerCase();
        g("input process - " + j(p) + " - " + o + "(" + q + ")");
        switch (q) {
          case "text":
          case "number":
            return p.val();
            break;
          case "radio":
            if (p.is(":checked")) {
              return p.val()
            }
            break;
          case "checkbox":
            if (p.is(":checked")) {
              return p.val()
            } else {
              if (c.storeUnchecked == true) {
                return c.storeUncheckedValue
              }
            }
            break;
          default:
          	return p.val();
        }
        break;
      case "select":
        g("input process - " + o);
        return p.val();
        break;
      case "textarea":
        g("input process - " + o);
        return p.val();
        break
    }
    return d
  };
  var b = function (o, q) {
    if (typeof (o.attr(c.validateAttribute)) != "undefined") {
      var p = o.attr(c.validateAttribute).toLowerCase();
      if (typeof (c.validator[p]) != "undefined") {
        var r = c.validator[p](q);
        g("validator - " + p + "(" + (r ? "pass" : "fail") + ")");
        if (!r && typeof (c.onFailedValidation) != "undefined") {
          c.onFailedValidation(o)
        }
        return r
      } else {
        i("could not find validator for " + p);
        return false
      }
    }
    g("validator - null(pass)");
    return true
  };
  var e = function (o, p) {
    var s = l(o);
    var r = $(c.structureElement + "[" + c.keyAttribute + "]", s).not($("*[" + c.keyAttribute + "] *[" + c.keyAttribute + "]", s));
    var q = $("*[" + c.keyAttribute + "]", s).not($("*", r)).not(c.structureElement);
    $.each(p, function (y, u) {
      if ($.isPlainObject(u)) {
        e(r, u)
      } else {
        if ($.isArray(u)) {
          var x = $("*[" + c.keyAttribute + "='" + y + "']", q.parent()).not($("*", "." + c.cloneDefaultClass)).not("." + c.cloneDefaultClass);
          if (x.size() < u.length) {
            var t = $("*[" + c.keyAttribute + "='" + y + "']." + c.cloneDefaultClass, q.parent());
            if (t.size() == 0) {
              i("could not find default clone element for " + y)
            } else {
              for (var w = x.size(); w < u.length; w++) {
                var v = t.clone().removeClass(c.cloneDefaultClass);
                t.before(v)
              }
              x = $("*[" + c.keyAttribute + "='" + y + "']", q.parent()).not($("*", "." + c.cloneDefaultClass)).not("." + c.cloneDefaultClass)
            }
          }
          x.each(function (z, A) {
            if (z < u.length) {
              if ($(A).is(c.structureElement)) {
                e($(A), u[z])
              } else {
                h($(A), u[z])
              }
            }
          })
        } else {
          $("*[" + c.keyAttribute + "='" + y + "']", q.parent()).each(function (z, A) {
            h($(A), u)
          })
        }
      }
    });
    return true
  };
  var h = function (p, r) {
    var o = p.context.tagName.toLowerCase();
    switch (o) {
      case "input":
        var q = typeof (p.attr("type")) == "undefined" ? "text" : p.attr("type").toLowerCase();
        g("input process - " + j(p) + " - " + o + "(" + q + ")");
        switch (q) {
          case "text":
          case "number":
            p.val(r);
            break;
          case "radio":
            if (p.val() == r) {
              p.attr("checked", true)
            } else {
              p.removeAttr("checked")
            }
            break;
          case "checkbox":
            console.log(p);
            console.log(r);
            if (p.val() == r) {
              p.attr("checked", true)
            } else {
              p.removeAttr("checked")
            }
            break;
          default:
          	p.val(r);
        }
        break;
      case "select":
        g("input process" + o);
        p.val(r);
        break;
      case "textarea":
        g("input process - " + o);
        return p.val(r);
        break
    }
    return false
  };
  this.getData = function (o) {
    var q = l(o);
    if (typeof (c.onBeforeGet) != "undefined") {
      g("event - onBeforeGet");
      c.onBeforeGet()
    }
    var p = m(q);
    if (typeof (c.onGetComplete) != "undefined") {
      g("event - onGetComplete");
      c.onGetComplete(p)
    }
    return p
  };
  this.setData = function (o, p) {
    var q = l(o);
    if (typeof (c.onBeforeSet) != "undefined") {
      g("event - onBeforeSet");
      c.onBeforeSet()
    }
    var p = e(q, p);
    if (typeof (c.onSetComplete) != "undefined") {
      g("event - onSetComplete");
      c.onSetComplete(p)
    }
    return p
  };
  k(a)
};